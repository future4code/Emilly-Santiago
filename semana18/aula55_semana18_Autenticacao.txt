# AULA 55 - Semana 18
## Relaçoes SQL

### Exercício 1
a) Sim. É mais seguro gerar um identificador único automaticamente.

b) 
```
import { v4 } from "uuid";

export class IdGenerated {

    generatedId = ():string => v4();
}
```

### Exercício 2
a) O primeito const declara uma variável que é um usuário. O connection faz a comunicação com o banco de dados usando a lib Knex. O createUser é uma função assincrona que espera a conecção com o banco de dados para inserir um novo usuário. Esse usuário tem id, email e senha que são inseridos dentro de User.

b) 
```
CREATE TABLE User (
		id VARCHAR(255) PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL
);
```

c) 
```
const userTableName = "User";

	 const createUser = async (
		id: string, 
		email: string, 
		password: string) => {
	  await connection
	    .insert({
	      id,
	      email,
	      password,
	    })
	    .into(userTableName);
	};
```

### Exercício 3
a) as string transforma o que vem dentro do dotenv em uma string.

b) Na pasta service/
```
import * as jwt from "jsonwebtoken";

  const expiresIn = "1min";
  const generateToken(input: AuthenticationData): string {
    const token = jwt.sign(
      {
        id: input.id,
      },
      process.env.JWT_KEY as string,
      {
        expiresIn
      }
    );
    return token;
  }
}


```


### Exercício 4
```
import { Request, Response } from "express";
import { connection } from "../data/connection";

app.post("/user/signup", async (req: Request, res: Response) =>{
    try{
    const {email, password} = req.body
    // validando email
        if (!email || email.indexOf("@") === -1) {
            throw new Error("Invalid email");
        }
        // validando senha
        if(password || password.length < 6) {
            throw new Error("Invalid password")
        }
        const useData = {
            email,
            password
        }
        const id = generateId();
        await createUser(id, userData.email, userData.password)
        
        const token = generateToken({
            id,
        })
        res.status(200).send({
            token,
        })
    }catch(error: any){
        res.status(400).send({
            message: err.message,
        });
    }
    
})
```

### Exercício 5
a)
```
        const [user] = await connection("userTableName").where({ email })
```

### Exercício 6
```
import { Request, Response } from "express";
import { connection } from "../data/connection";

app.post("/user/login", async (req: Request, res: Response) =>{
    try{
    const {email, password} = req.body
        // validando email
        if (!email || email.indexOf("@") === -1) {
            throw new Error("Invalid email");
        }
       
        const [user] = await connection("userTableName").where({ email })
        
        if (!user || user.password !== password) {
            res.statusCode = 401
            res.statusMessage = "Invalid Password"
            throw new Error()
        }

        const token = generateToken({
            id: user.id,
        });

        res.status(200).send({ token })
    }catch(error: any){
        res.status(400).send({
            message: err.message,
        });
    }
    
})
```

### Exercício 7
a) as any faz com que a variável payload seja de qualquer tipo. 
b)
```
getTokenData = (token: string) => {
        try {
            const tokenData = verify(
                token,
                process.env.JWT_SECRET as string
            ) as any

            return {
                id:tokenData.id
            }
        } catch (error) {
            console.log(error)
            return null
        }
    }
```

### Exercício 8
a) 
```
public async getUserById(id: string): Promise<any> {
    const result = await this.connection
      .select("*")
      .from(userTableName)
      .where({ id });

    return result[0];
  }
}
```
b)
```
app.get("/user/profile", async (req: Request, res: Response) => {
  try {
    const token = req.headers.authorization as string;

   
    const authenticationData = getData(token);

    const user = await getUserById(authenticationData.id);

    res.status(200).send({
      id: user.id,
      email: user.email,
    });
  } catch (err) {
    res.status(400).send({
      message: err.message,
    });
  }
});
```











